comment "//" ;
comment "#" ;
comment "/*" "*/" ;
comment "{" "}" ;
comment "{*" "*}" ;
  
--entrypoints Stmt;
entrypoints Program ;
--entrypoints Exp ;

Programm.	Program	::=	ProgramNameHeader Block "." ;
--Programm.	Program	::=	Exp ;

ProgNameHeaderNotBlank.	ProgramNameHeader 	::= "program" Ident ";" ;
ProgNameHeaderBlank.	ProgramNameHeader 	::=  ;


--Blockk.		Block	::= ProcDeclaration ConstantDeclaration VariableDeclaration "begin" [Stmt] "end" ;
Blockk.		Block	::= VariableDeclaration ProcDeclaration Stmt2 ;

terminator Stmt "" ;

		

--------------(Proc Declaration)-----------
PExists.		    ProcDeclaration ::= "proc" [ProcDeclLine] ;
PFExists.		    ProcDeclaration ::= "proc" [ProcDeclLine] [FuncDeclLine];
FExists.		    ProcDeclaration ::= "proc" [FuncDeclLine] ;
PDoesntExist.		ProcDeclaration ::= ;

--ProcDecR.		    ProcDeclLine ::= ProcDeclLine ;

PLineNonArg.		ProcDeclLine ::= "procedure" Ident "(" ")" ";" VariableDeclaration Stmt2;
PLineArg.		    ProcDeclLine ::= "procedure" Ident "(" VarDeclarationLine ")" ";" VariableDeclaration Stmt2;
terminator ProcDeclLine "";

FLineNonArg.		FuncDeclLine ::= "function" Ident "(" ")" ":" Type ";" VariableDeclaration Stmt2;
FLineArg.		    FuncDeclLine ::= "function" Ident "(" VarDeclarationLine ")" ":" Type ";" VariableDeclaration Stmt2;
terminator FuncDeclLine "";

NonEmptyArgs.		FuncArg ::= VarDeclarationLine ;
EmptyArgs.		FuncArg ::= ;

-------------(Variables Declaration)---------------
VBExists.		VariableDeclaration ::=	"var" [VarDeclarationLine] ;
-- i know it's a english grammar mistake
VBDoesntExists.		VariableDeclaration ::=	;
DLList.			VarDeclarationLine    ::= [Ident] ":" Type ";" ;


separator nonempty VarDeclarationLine "" ;
separator nonempty Ident "," ;

--------------(Constant Declaration)-------------
ConstDeclBlank.		ConstantDeclaration	::=	;
ConstDeclNotBlank.	ConstantDeclaration	::=	"const" [ConstDeclLine];

ConsDeclLine.		ConstDeclLine	::=	Ident "=" LiteralValue ";" ;
--LiteralValStr.	LiteralValue	::=	String ;
--LiteralValDouble.	LiteralValue	::=	Double ;
--LiteralValChar.	LiteralValue	::=	Char ;
LiteralValInt.		LiteralValue	::=	Integer ;

separator nonempty ConstDeclLine "" ;

---------------(bool values)-------
BoolLitTrue.	BoolLit	::=	"True" ;
BoolLitFalse.	BoolLit	::=	"False" ;

------------(statements)-------

SBlank.     Stmt    ::= ";" ;
SBlock.		Stmt2	::=	"begin" [Stmt] "end" ;

SAttr.      Stmt    ::= Ident ":=" Ident ";";
SAttrArray.	Stmt	::=	Ident "[" Integer "]" ":=" Ident ";" ;

SAss.		Stmt	::=	Ident ":=" Exp ";" ;
SAssArray.	Stmt	::=	Ident "[" Integer "]" ":=" Exp ";" ;

SAssRec.	Stmt	::=	Ident "." Ident ":=" Exp ";" ;

SAssBool.		Stmt	::=	Ident ":=" BExp ";" ;
SAssBoolLit.		Stmt	::=	Ident ":=" BoolLit ";" ;

SReturn.		Stmt	::=	"return" Integer ";" ";" ;

SAssString.		Stmt	::=	Ident ":=" String ";" ;
SAssStrToInt.		Stmt	::=	Ident ":=" "strToInt" String ";" ;
SAzs.			Stmt	::=	Ident ":=" "intToStr" Integer ";" ;
SAssArrayBool.		Stmt	::=	Ident "[" Integer "]" ":=" BExp ";" ;
SAssArrayBoolLit.	Stmt	::=	Ident "[" Integer "]" ":=" BoolLit ";" ;
SAssArrayString.	Stmt	::=	Ident "[" Integer "]" ":=" String ";" ;

SAssMult.    	Stmt 	::= 	Ident "*=" Exp ";" ; 
SAssDiv.    	Stmt 	::= 	Ident "/=" Exp ";" ; 
SAssAdd.    	Stmt 	::= 	Ident "+=" Exp ";" ; 
SAssSub.    	Stmt 	::= 	Ident "-=" Exp ";" ; 
SPreIncr.    	Stmt1 	::= 	"++" Ident ";" ;
SPreDecr.    	Stmt1 	::= 	"--" Ident ";" ;


--SExp.		Stmt 	::=	Exp ";" ;

SIf.			Stmt	::= IfStmt;
SimpleIf.		IfStmt	::= "if" BExp "then" Stmt "endif";
IfElse.			IfStmt1	::= "if" BExp "then" Stmt "else" Stmt "endif";
IfElif.			IfStmt2	::= "if" BExp "then" Stmt "elif" BExp "then" Stmt "endif";
IfElifElse.		IfStmt3	::= "if" BExp "then" Stmt "elif" BExp "then" Stmt "else" Stmt "endif";
coercions 	IfStmt 	3; 

--SIf.			Stmt	::=	"if" BExp "then" Stmt ElIfBlock ElseBlock;
--BlankEsleBlock.		ElseBlock::=	;
--NBlankElseBlock. 	ElseBlock::=	"else" Stmt;
--BlankEsIfBlock.		ElIfBlock::=	;
--NBlankElIfBlock. 	ElIfBlock::=	"elif" Stmt;

--SElseBlock.	ElseBlock::=	[ElseIf] Else ;
--		ElseIf	::=		


SWhile.		Stmt	::=	"while" BExp "do" Stmt ; 
SFor.       	Stmt 	::= 	"for" Ident ":=" Exp "to" Exp "do" Stmt;

SPrintString.	Stmt	::=	"print" "<-" "(" String ")" ";" ;
SPrintBLit.	Stmt	::=	"print" "<-" "(" BoolLit ")" ";" ;
SPrintId.	Stmt	::=	"print" "<--" "(" Ident ")" ";" ;
SPrintArray.	Stmt	::=	"print" "<--" "(" Ident "[" Integer "]" ")" ";" ;
SPrintExp.	Stmt	::=	"print" "<-" "(" Exp ")" ";" ;
SPrintBExp.	Stmt	::=	"print" "<-" "(" BExp ")" ";" ;
SPrintCharLit.	Stmt	::=	"print" "<-" "(" Char ")" ";" ;

--TODO - to full implement it : do similar for SPrintArray for records
SPrintIdRec.	Stmt	::=	"print" "<--" "(" Ident "." Ident ")" ";" ;

SPrintFun.	    Stmt 	::=	"print" "<--" "(" Ident "(" ")" ")" ";" ;
SPrintFunExp.	Stmt 	::=	"print" "<--" "(" Ident "(" Exp ")" ")" ";"  ;
SPrintFunBExp.	Stmt 	::=	"print" "<--" "(" Ident "(" BExp ")" ")" ";"  ;
SPrintFunString.	Stmt 	::=	"print" "<--" "(" Ident "(" String ")" ")" ";"  ;
SPrintFunId.	Stmt 	::=	"print" "<--" "(" Ident "(" Ident ")" ")" ";"  ;
SPrintFunIdArray.	Stmt 	::=	"print" "<--" "(" Ident "(" Ident "[" Integer "]"   ")" ")" ";"  ;


SProcAttr.          Stmt    ::= Ident ":=" Procc ;

ProcCall.		        Procc	::=	Ident "(" ")" ";" ;
--SProcCallInteger.	    Procc	::=	Ident "(" Integer ")" ";" ;
ProcCallId.		        Procc	::=	Ident "(" Ident ")" ";" ;
ProcCallIdArray.	    Procc	::=	Ident "(" Ident "[" Integer "]" ")" ";" ;
ProcCallExp.		    Procc	::=	Ident "(" Exp ")" ";" ;
ProcCallBExp.		    Procc	::=	Ident "(" BExp ")" ";" ;
ProcCallString. 	    Procc	::=	Ident "(" String ")" ";" ;
ProcCallFuncSyg. 	    Procc	::=	Ident "(" FuncDeclLine ")" ";" ;

--ProcCallIdRef.	        Procc	::=	Ident "(" Ident ")" ";" ;

SProcCall.		    Stmt	::=	Ident "(" ")" ";" ;
--SProcCallInteger.	Stmt	::=	Ident "(" Integer ")" ";" ;
SProcCallId.		Stmt	::=	Ident "(" Ident ")" ";" ;
SProcCallIdArray.	Stmt	::=	Ident "(" Ident "[" Integer "]" ")" ";" ;
SProcCallExp.		Stmt	::=	Ident "(" Exp ")" ";" ;
SProcCallBExp.		Stmt	::=	Ident "(" BExp ")" ";" ;
SProcCallString.	Stmt	::=	Ident "(" String ")" ";" ;
SProcCallFuncSyg.	Stmt	::=	Ident "(" FuncDeclLine ")" ";" ;


--TODO
--to full implement ref do it for IdArray and bould ProcCallFunc Id and ArrayId
SProcCallIdRef.		Stmt	::=	Ident "(" "ref" Ident ")" ";" ;

--SPrintId.	Stmt	::=	"print" Ident ";" ;
--SPrintArray.	Stmt	::=	"print" Ident "[" Integer "]" ";" ;

--SPrintBExp.
--SPrint.		Stmt	::=	"print" LitVal ";" ;

--SPrintString.	Stmt	::=	"print" String ";" ;
--SPrintInt.	Stmt	::=	"print" Integer ";" ;
--SPrintChar.	Stmt	::=	"print" Char ";" ;
--SPrintDouble.	Stmt	::=	"print" Double ";" ;

coercions Stmt 2;

------------(print args)--------



-------------(expressions)--------
EAdd. 	Exp 	::= 	Exp 	"+" 	Exp1 	;
ESub. 	Exp 	::= 	Exp 	"-" 	Exp1 	;
EMul. 	Exp1 	::= 	Exp1 	"*" 	Exp2 	;
EDiv. 	Exp1 	::= 	Exp1 	"/" 	Exp2 	;
EInt. 	Exp2 	::= 	Integer 	;
--EBool. 	Exp2 	::= 	BExp 	;
EId.	Exp2	::=	Ident	;
EFunNonArg.	Exp2	::=	Ident "(" ")"	;
--EFunArg.	Exp2	::=	Ident "(" ")"	;


--EFunInteger.	    Exp2	::=	Ident "(" Integer ")" ;
EFunId.		        Exp2	::=	Ident "(" Ident ")"  ;
EFunIdArray.	    Exp2	::=	Ident "(" Ident "[" Integer "]" ")"  ;
EFunIdWholeArray.	Exp2	::=	Ident "(" Ident ")"  ;
EFunExp.		    Exp2	::=	Ident "(" Exp ")"  ;
EFunBExp.		    Exp2	::=	Ident "(" BExp ")"  ;
EFunString.	        Exp2	::=	Ident "(" String ")"  ;

EArray. Exp2	::= 	Ident "[" Integer "]" ;
--EBool.  Exp2	::=	BExp ;
coercions 	Exp 	2 	;
--EAss.		Exp 	::=	Ident "=" Exp ;

----------------(Bool Expressions)----------
BOr.  	BExp   	::= BExp "||" BExp1 ;
BAnd. 	BExp1  	::= BExp1 "&&" BExp2 ;
BRel.  	BExp2  	::= Exp RelOp Exp ;
BStringRel.  	BExp2  	::= Ident ".equals" "(" String ")" ;
BStringRel5.  	BExp2  	::= Ident "[" Integer "]" ".equals" "(" String ")" ;
--BStringRel6.  	BExp2  	::= Ident "[" Ident "]"  ".equals" "(" Ident ")" ;
--BStringRel7.  	BExp2  	::= Ident "[" Ident "]" ".equals" "(" String ")" ;
BStringRel6.  	BExp2  	::= Ident "[" Integer "]"  ".equals" "(" Ident ")" ;
BStringRel2.  	BExp2  	::= String ".equals" "(" Ident ")" ;
BStringRel3.  	BExp2  	::= Ident ".equals" "(" Ident ")" ;
BStringRel4.  	BExp2  	::= String ".equals" "(" String ")" ;
BLit.	BExp2	::= BoolLit;
BIdent.	BExp2	::= Ident ;
BExpArray.	BExp2	::= Ident "[" Integer "]";
BTExp.	BExp	::= Exp ;	

coercions BExp 2 ;

----------(operators)-------
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

---------(types)-----------

TVoid.      Type    ::= "Void";
TInt.		Type	::=	"Integer" ;
TBool.		Type 	::=	"Boolean" ;
TString.	Type	::=	"String" ;
TChar.		Type	::=	"Char" ;
TDouble.	Type 	::=	"Double" ;
TArray.		Type2	::=	"Array" "[" Integer ".." Integer "]" "of" Type ;
TFunc.      Type    ::= "Function" "(" Type ")" ":" Type ;
TRecord.    Type    ::= "Record" [VarDeclarationLine] "RecEnd" ;
--TFuncSyg.   FuncSyg ::= "Function" "(" VarDeclarationLine ")" ":" Type VariableDeclaration Stmt2 ;
coercions Type 2 ;
--tablica_imion : Array[1..10] of string;

------(Literals)-----------
--LiteralValueInteger.			LitVal	::=	Integer ;
LiteralValueString.			LitVal	::=	String ;
LiteralValueDouble.			LitVal	::=	Double ;
LiteralValueChar.			LitVal	::=	Char ;
--LiteralValueTrue.			LitVal	::=	"true" ;
--LiteralValueFalse.			LitVal	::=	"false" ;