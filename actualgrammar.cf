comment "//" ;
comment "/*" "*/" ;
comment "{" "}" ;
comment "{*" "*}" ;
  
entrypoints Program ;

Programm.	Program	::=	ProgramNameHeader Block "." ;

ProgNameHeaderNotBlank.	ProgramNameHeader 	::= "program" Ident ";" ;
ProgNameHeaderBlank.	ProgramNameHeader 	::=  ;

{-
Blockk.			Block	::= 	;	
Blockk1.		Block1	::= 	ConstantDeclaration ";" Block2 ;
Blockk2.		Block2	::= 	TypeDeclaration ";" Block3 ;
Blockk3.		Block3	::= 	VariableDeclaration ";" Block4 ;
Blockk4.		Block4	::= 	ProcAndFuncDeclaration ";" Block5 ;
Blockk5.		Block5	::= 	"begin" [Stmt] "end" ;
coercions Block 5 ;
-}

Blockk.			Block	::= ConstantDeclaration Block2 ;
Blockk2.		Block2	::= VariableDeclaration Block3 ;
Blockk3.		Block3	::= "begin" [Stmt] "end" ;

-------------(Variables Declaration)---------------
VBExists.		VariableDeclaration ::=	"var" [VarDeclarationLine] ;
VBDoesntExists.		VariableDeclaration ::=	;
DLList.			VarDeclarationLine    ::= [Ident] ":" Type ";" ;

separator nonempty DeclarationLine "" ;
separator nonempty Ident "," ;

--------------(Constant Declaration)-------------
ConstDeclBlank.		ConstantDeclaration	::=	;
ConstDeclNotBlank.	ConstantDeclaration	::=	"const" [ConstDeclLine];

ConsDeclLine.		ConstDeclLine	::=	Ident "=" LiteralValue ";" ;
--LiteralValStr.	LiteralValue	::=	String ;
--LiteralValDouble.	LiteralValue	::=	Double ;
--LiteralValChar.	LiteralValue	::=	Char ;
LiteralValInt.		LiteralValue	::=	Integer ;

separator nonempty ConstDeclLine "" ;

------------(statements)-------

terminator Stmt "" ;

Stmtt.		Stmt 	::=	Exp ;

EAss.		Exp 	::=	Ident "=" Exp ;

---------(types)-----------

TInt.	Type	::=	"Integer" ;
TBool.	Type 	::=	"Boolean" ;
