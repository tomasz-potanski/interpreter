comment "//" ;
comment "#" ;
comment "/*" "*/" ;
comment "{" "}" ;
comment "{*" "*}" ;
  
--entrypoints Stmt;
entrypoints Program ;
--entrypoints Exp ;

Programm.	Program	::=	ProgramNameHeader Block "." ;
--Programm.	Program	::=	Exp ;

ProgNameHeaderNotBlank.	ProgramNameHeader 	::= "program" Ident ";" ;
ProgNameHeaderBlank.	ProgramNameHeader 	::=  ;


--Blockk.		Block	::= ConstantDeclaration VariableDeclaration "begin" [Stmt] "end" ;
Blockk.		Block	::= VariableDeclaration Stmt2 ;

terminator Stmt "" ;

-------------(Variables Declaration)---------------
VBExists.		VariableDeclaration ::=	"var" [VarDeclarationLine] ;
VBDoesntExists.		VariableDeclaration ::=	;
DLList.			VarDeclarationLine    ::= [Ident] ":" Type ";" ;


separator nonempty VarDeclarationLine "" ;
separator nonempty Ident "," ;

--------------(Constant Declaration)-------------
ConstDeclBlank.		ConstantDeclaration	::=	;
ConstDeclNotBlank.	ConstantDeclaration	::=	"const" [ConstDeclLine];

ConsDeclLine.		ConstDeclLine	::=	Ident "=" LiteralValue ";" ;
--LiteralValStr.	LiteralValue	::=	String ;
--LiteralValDouble.	LiteralValue	::=	Double ;
--LiteralValChar.	LiteralValue	::=	Char ;
LiteralValInt.		LiteralValue	::=	Integer ;

separator nonempty ConstDeclLine "" ;

---------------(bool values)-------
BoolLitTrue.	BoolLit	::=	"True" ;
BoolLitFalse.	BoolLit	::=	"False" ;

------------(statements)-------

SBlock.		Stmt2	::=	"begin" [Stmt] "end" ;

SAss.		Stmt	::=	Ident ":=" Exp ";" ;
SAssArray.	Stmt	::=	Ident "[" Integer "]" ":=" Exp ";" ;

SAssBool.		Stmt	::=	Ident ":=" BExp ";" ;
--SAssBoolLit.		Stmt	::=	Ident ":=" BoolLit ";" ;
SAssArrayBool.		Stmt	::=	Ident "[" Integer "]" ":=" BExp ";" ;
--SAssArrayBoolLit.	Stmt	::=	Ident "[" Integer "]" ":=" BoolLit ";" ;

SAssMult.    	Stmt 	::= 	Ident "*=" Exp ";" ; 
SAssDiv.    	Stmt 	::= 	Ident "/=" Exp ";" ; 
SAssAdd.    	Stmt 	::= 	Ident "+=" Exp ";" ; 
SAssSub.    	Stmt 	::= 	Ident "-=" Exp ";" ; 
SPreIncr.    	Stmt1 	::= 	"++" Ident ";" ;
SPreDecr.    	Stmt1 	::= 	"--" Ident ";" ;


--SExp.		Stmt 	::=	Exp ";" ;

SIf.			Stmt	::= IfStmt;
SimpleIf.		IfStmt	::= "if" BExp "then" Stmt ;
IfElse.			IfStmt1	::= "if" BExp "then" Stmt "else" Stmt;
IfElif.			IfStmt2	::= "if" BExp "then" Stmt "elif" BExp "then" Stmt;
IfElifElse.		IfStmt3	::= "if" BExp "then" Stmt "elif" BExp "then" Stmt "else" Stmt;
coercions 	IfStmt 	3; 

--SIf.			Stmt	::=	"if" BExp "then" Stmt ElIfBlock ElseBlock;
--BlankEsleBlock.		ElseBlock::=	;
--NBlankElseBlock. 	ElseBlock::=	"else" Stmt;
--BlankEsIfBlock.		ElIfBlock::=	;
--NBlankElIfBlock. 	ElIfBlock::=	"elif" Stmt;

--SElseBlock.	ElseBlock::=	[ElseIf] Else ;
--		ElseIf	::=		


SWhile.		Stmt	::=	"while" BExp "do" Stmt ; 
SFor.       	Stmt 	::= 	"for" Ident ":=" Exp "to" Exp "do" Stmt;

SPrint.		Stmt	::=	"print" Printalbe ";" ;
SPExp.		Printable::=	Exp;
SPId.		Printable2::=	Ident ;
coercions Printable 2;

--SPrintId.	Stmt	::=	"print" Ident ";" ;
--SPrintArray.	Stmt	::=	"print" Ident "[" Integer "]" ";" ;
--SPrintExp.	Stmt	::=	"print" Exp ";" ;
--SPrint.		Stmt	::=	"print" LitVal ";" ;

--SPrintString.	Stmt	::=	"print" String ";" ;
--SPrintInt.	Stmt	::=	"print" Integer ";" ;
--SPrintChar.	Stmt	::=	"print" Char ";" ;
--SPrintDouble.	Stmt	::=	"print" Double ";" ;

coercions Stmt 2;

------------(print args)--------



-------------(expressions)--------
EAdd. 	Exp 	::= 	Exp 	"+" 	Exp1 	;
ESub. 	Exp 	::= 	Exp 	"-" 	Exp1 	;
EMul. 	Exp1 	::= 	Exp1 	"*" 	Exp2 	;
EDiv. 	Exp1 	::= 	Exp1 	"/" 	Exp2 	;
EInt. 	Exp2 	::= 	Integer 	;
EId.	Exp2	::=	Ident	;
EArray. Exp2	::= 	Ident "[" Integer "]" ;
--EBool.  Exp2	::=	BExp ;
coercions 	Exp 	2 	;
--EAss.		Exp 	::=	Ident "=" Exp ;

----------------(Bool Expressions)----------
BOr.  	BExp   	::= BExp "||" BExp1 ;
BAnd. 	BExp1  	::= BExp1 "&&" BExp2 ;
BRel.  	BExp2  	::= Exp RelOp Exp ;
BBLit.	BExp2	::= BoolLit ;
--BTExp.	BExp	::= Exp ;	

coercions BExp 2 ;

----------(operators)-------
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

---------(types)-----------

TInt.		Type	::=	"Integer" ;
TBool.		Type 	::=	"Boolean" ;
TString.	Type	::=	"String" ;
TChar.		Type	::=	"Char" ;
TDouble.	Type 	::=	"Double" ;
TArray.		Type2	::=	"Array" "[" Integer ".." Integer "]" "of" Type ;
coercions Type 2 ;
--tablica_imion : Array[1..10] of string;

------(Literals)-----------
--LiteralValueInteger.			LitVal	::=	Integer ;
LiteralValueString.			LitVal	::=	String ;
LiteralValueDouble.			LitVal	::=	Double ;
LiteralValueChar.			LitVal	::=	Char ;
--LiteralValueTrue.			LitVal	::=	"true" ;
--LiteralValueFalse.			LitVal	::=	"false" ;
