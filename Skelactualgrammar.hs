module Skelactualgrammar where

-- Haskell module generated by the BNF converter

import Absactualgrammar
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transStmt :: Stmt -> Result
transStmt x = case x of
  SBlock stmts  -> failure x
  SAss id exp  -> failure x
  SIf bexp stmt  -> failure x
  SWhile bexp stmt  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  EAdd exp1 exp2  -> failure x
  ESub exp1 exp2  -> failure x
  EMul exp1 exp2  -> failure x
  EDiv exp1 exp2  -> failure x
  EInt n  -> failure x
  EId id  -> failure x


transBExp :: BExp -> Result
transBExp x = case x of
  BOr bexp1 bexp2  -> failure x
  BAnd bexp1 bexp2  -> failure x



